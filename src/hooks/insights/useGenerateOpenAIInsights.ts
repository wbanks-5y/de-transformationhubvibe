
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { useOrganization } from '@/context/OrganizationContext';
import { generateOpenAIInsights } from '@/services/openaiInsightsService';
import { toast } from 'sonner';

function getDaysFromTimeRange(timeRange: string): number {
  switch (timeRange) {
    case '7d':
      return 7;
    case '30d':
      return 30;
    case '90d':
      return 90;
    default:
      return 30;
  }
}

export const useGenerateOpenAIInsights = () => {
  const queryClient = useQueryClient();
  const { organizationClient } = useOrganization();

  return useMutation({
    mutationFn: async ({ 
      cockpitTypeId, 
      timeRange = '30d',
      cockpitDisplayName,
      replaceExisting = false
    }: { 
      cockpitTypeId: string; 
      timeRange?: string;
      cockpitDisplayName?: string;
      replaceExisting?: boolean;
    }) => {
      if (!organizationClient) {
        throw new Error('No organization client available');
      }
      console.log('Starting OpenAI insights generation for cockpit:', cockpitTypeId);
      
      const days = getDaysFromTimeRange(timeRange);
      const startDate = new Date();
      startDate.setDate(startDate.getDate() - days);
      
      // Fetch cockpit data
      const { data: cockpitData, error: cockpitError } = await organizationClient
        .from('cockpit_types')
        .select(`
          *,
          cockpit_sections (
            *,
            cockpit_metrics (*)
          )
        `)
        .eq('id', cockpitTypeId)
        .single();

      if (cockpitError) {
        console.error('Error fetching cockpit data:', cockpitError);
        throw cockpitError;
      }

      // For now, we'll generate insights based on the cockpit structure only
      const metricData: any[] = [];

      console.log('Cockpit data loaded:', cockpitData);
      console.log('Metric data loaded:', metricData?.length || 0, 'records');

      // Generate insights using OpenAI with correct parameter names
      const insights = await generateOpenAIInsights({
        cockpitTypeId,
        cockpitData,
        metrics: metricData,
        timeRange,
        cockpitDisplayName,
        replaceExisting
      });

      console.log('Generated OpenAI insights:', insights);

      if (!insights || insights.length === 0) {
        throw new Error('No insights were generated by OpenAI');
      }

      // Save insights to database
      const { data: savedInsights, error: saveError } = await organizationClient
        .from('cockpit_insights')
        .insert(
          insights.map(insight => ({
            ...insight,
            cockpit_type_id: cockpitTypeId,
            generated_at: new Date().toISOString(),
            is_active: true
          }))
        )
        .select();

      if (saveError) {
        console.error('Error saving OpenAI insights:', saveError);
        throw saveError;
      }

      console.log('OpenAI insights saved successfully:', savedInsights);
      return savedInsights;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['cockpit-insights'] });
      toast.success('OpenAI insights generated successfully!');
    },
    onError: (error: any) => {
      console.error('Failed to generate OpenAI insights:', error);
      toast.error(`Failed to generate OpenAI insights: ${error.message}`);
    }
  });
};
